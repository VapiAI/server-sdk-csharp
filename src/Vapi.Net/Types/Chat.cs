using System.Text.Json;
using System.Text.Json.Serialization;
using OneOf;
using Vapi.Net.Core;

namespace Vapi.Net;

[Serializable]
public record Chat
{
    /// <summary>
    /// This is the assistant that will be used for the chat. To use an existing assistant, use `assistantId` instead.
    /// </summary>
    [JsonPropertyName("assistantId")]
    public string? AssistantId { get; set; }

    /// <summary>
    /// This is the assistant that will be used for the chat. To use an existing assistant, use `assistantId` instead.
    /// </summary>
    [JsonPropertyName("assistant")]
    public CreateAssistantDto? Assistant { get; set; }

    /// <summary>
    /// These are the variable values that will be used to replace template variables in the assistant messages.
    /// Only variable substitution is supported in chat contexts - other assistant properties cannot be overridden.
    /// </summary>
    [JsonPropertyName("assistantOverrides")]
    public AssistantOverrides? AssistantOverrides { get; set; }

    /// <summary>
    /// This is the name of the chat. This is just for your own reference.
    /// </summary>
    [JsonPropertyName("name")]
    public string? Name { get; set; }

    /// <summary>
    /// This is the ID of the session that will be used for the chat.
    /// Mutually exclusive with previousChatId.
    /// </summary>
    [JsonPropertyName("sessionId")]
    public string? SessionId { get; set; }

    /// <summary>
    /// This is the input text for the chat.
    /// Can be a string or an array of chat messages.
    /// </summary>
    [JsonPropertyName("input")]
    public OneOf<
        string,
        IEnumerable<
            OneOf<SystemMessage, UserMessage, AssistantMessage, ToolMessage, DeveloperMessage>
        >
    >? Input { get; set; }

    /// <summary>
    /// This is a flag that determines whether the response should be streamed.
    /// When true, the response will be sent as chunks of text.
    /// </summary>
    [JsonPropertyName("stream")]
    public bool? Stream { get; set; }

    /// <summary>
    /// This is the ID of the chat that will be used as context for the new chat.
    /// The messages from the previous chat will be used as context.
    /// Mutually exclusive with sessionId.
    /// </summary>
    [JsonPropertyName("previousChatId")]
    public string? PreviousChatId { get; set; }

    /// <summary>
    /// This is the unique identifier for the chat.
    /// </summary>
    [JsonPropertyName("id")]
    public required string Id { get; set; }

    /// <summary>
    /// This is the unique identifier for the org that this chat belongs to.
    /// </summary>
    [JsonPropertyName("orgId")]
    public required string OrgId { get; set; }

    /// <summary>
    /// This is an array of messages used as context for the chat.
    /// Used to provide message history for multi-turn conversations.
    /// </summary>
    [JsonPropertyName("messages")]
    public IEnumerable<
        OneOf<SystemMessage, UserMessage, AssistantMessage, ToolMessage, DeveloperMessage>
    >? Messages { get; set; }

    /// <summary>
    /// This is the output messages generated by the system in response to the input.
    /// </summary>
    [JsonPropertyName("output")]
    public IEnumerable<
        OneOf<SystemMessage, UserMessage, AssistantMessage, ToolMessage, DeveloperMessage>
    >? Output { get; set; }

    /// <summary>
    /// This is the ISO 8601 date-time string of when the chat was created.
    /// </summary>
    [JsonPropertyName("createdAt")]
    public required DateTime CreatedAt { get; set; }

    /// <summary>
    /// This is the ISO 8601 date-time string of when the chat was last updated.
    /// </summary>
    [JsonPropertyName("updatedAt")]
    public required DateTime UpdatedAt { get; set; }

    /// <summary>
    /// These are the costs of individual components of the chat in USD.
    /// </summary>
    [JsonPropertyName("costs")]
    public IEnumerable<object>? Costs { get; set; }

    /// <summary>
    /// This is the cost of the chat in USD.
    /// </summary>
    [JsonPropertyName("cost")]
    public double? Cost { get; set; }

    /// <summary>
    /// Additional properties received from the response, if any.
    /// </summary>
    /// <remarks>
    /// [EXPERIMENTAL] This API is experimental and may change in future releases.
    /// </remarks>
    [JsonExtensionData]
    public IDictionary<string, JsonElement> AdditionalProperties { get; internal set; } =
        new Dictionary<string, JsonElement>();

    /// <inheritdoc />
    public override string ToString()
    {
        return JsonUtils.Serialize(this);
    }
}
