using System.Text.Json;
using System.Text.Json.Serialization;
using Vapi.Net.Core;

namespace Vapi.Net;

public record ToolCallResult
{
    /// <summary>
    /// This is the message that will be spoken to the user.
    ///
    /// If this is not returned, assistant will speak:
    /// 1. a `request-complete` or `request-failed` message from `tool.messages`, if it exists
    /// 2. a response generated by the model, if not
    /// </summary>
    [JsonPropertyName("message")]
    public ToolCallResultMessage? Message { get; set; }

    /// <summary>
    /// This is the name of the function the model called.
    /// </summary>
    [JsonPropertyName("name")]
    public required string Name { get; set; }

    /// <summary>
    /// This is the unique identifier for the tool call.
    /// </summary>
    [JsonPropertyName("toolCallId")]
    public required string ToolCallId { get; set; }

    /// <summary>
    /// This is the result if the tool call was successful. This is added to the conversation history.
    ///
    /// Further, if this is returned, assistant will speak:
    /// 1. the `message`, if it exists and is of type `request-complete`
    /// 2. a `request-complete` message from `tool.messages`, if it exists
    /// 3. a response generated by the model, if neither exist
    /// </summary>
    [JsonPropertyName("result")]
    public string? Result { get; set; }

    /// <summary>
    /// This is the error if the tool call was not successful. This is added to the conversation history.
    ///
    /// Further, if this is returned, assistant will speak:
    /// 1. the `message`, if it exists and is of type `request-failed`
    /// 2. a `request-failed` message from `tool.messages`, if it exists
    /// 3. a response generated by the model, if neither exist
    /// </summary>
    [JsonPropertyName("error")]
    public string? Error { get; set; }

    /// <summary>
    /// This is optional metadata for the tool call result to be sent to the client.
    /// </summary>
    [JsonPropertyName("metadata")]
    public object? Metadata { get; set; }

    /// <summary>
    /// Additional properties received from the response, if any.
    /// </summary>
    /// <remarks>
    /// [EXPERIMENTAL] This API is experimental and may change in future releases.
    /// </remarks>
    [JsonExtensionData]
    public IDictionary<string, JsonElement> AdditionalProperties { get; internal set; } =
        new Dictionary<string, JsonElement>();

    /// <inheritdoc />
    public override string ToString()
    {
        return JsonUtils.Serialize(this);
    }
}
